---
import Section from "../components/ui/Section.astro";
import { getCollection, getEntry } from "astro:content";
import type { CollectionEntry } from "astro:content";
import BaseLayout from "../components/layout/BaseLayout.astro";
import ContentList from "../components/shared/ContentList.astro";
import Container from "../components/ui/Container.astro";

// --- START OF ADDITIONS/CHANGES ---

// Access the base URL from astro.config.mjs (via Vite's import.meta.env)
const BASE_URL = import.meta.env.BASE_URL;

// Helper function to safely prepend the base URL to internal paths.
// This handles cases where BASE_URL might be '/' or '/subpath/'
// and ensures paths are correctly formed without double slashes.
function prependBase(path: string): string {
    if (BASE_URL === '/') {
        return path; // No base path needed if it's root
    }
    // new URL(path, BASE_URL) correctly handles leading/trailing slashes.
    // .pathname extracts just the path part.
    return new URL(path, BASE_URL).pathname;
}

// --- END OF ADDITIONS/CHANGES ---


const siteConfig = await getEntry("site", "home");
if (!siteConfig) {
  throw new Error("Site configuration not found");
}

const site = siteConfig.data;

const formatDate = (date: Date | undefined) => {
  if (!date) return "";
  return date.toLocaleDateString("en-US", {
    month: "short",
    day: "numeric",
  });
};

const posts = await getCollection("blog", ({ data }: CollectionEntry<"blog">) => {
  return import.meta.env.PROD ? !data.draft : true;
});
const latestPosts = posts
  .sort(
    (a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) =>
      b.data.publishedAt.getTime() - a.data.publishedAt.getTime()
  )
  .slice(0, 3);

const experiences = await getCollection("experience");
const sortedExperiences = experiences.sort(
  (a: CollectionEntry<"experience">, b: CollectionEntry<"experience">) =>
    b.data.startDate.getTime() - a.data.startDate.getTime()
);

const projects = await getCollection("projects");
const featuredProjects = projects.filter((project: CollectionEntry<"projects">) => project.data.featured).slice(0, 3);
---

<BaseLayout title={`${site.name} - Portfolio`} description={site.introduction}>
  <Container>
    <section class="hero">
      <h1>{site.name}</h1>
      <p class="subtitle">{site.title}</p>
      <p class="introduction">{site.introduction}</p>
      {
        site.socialLinks && (
          <div class="social-links">
            {/* Social links are usually absolute URLs, so they don't need prependBase */}
            {site.socialLinks.map(({ platform, url }) => (
              <a href={url} target="_blank" rel="noopener noreferrer">
                {platform}
              </a>
            ))}
          </div>
        )
      }
    </section>

    <Section>
      <div class="section-header">
        <h2>{site.sections.blog.title}</h2>
        {/* FIX: Prepend BASE_URL to internal link */}
        <a href={prependBase("/blog")}>{site.sections.blog.viewAllText}</a>
      </div>
      <ContentList>
        {
          latestPosts.map((post) => (
            <article>
              <div class="title-row">
                {/* FIX: Prepend BASE
